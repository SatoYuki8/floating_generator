----------------------------------------------
11/12
pipelineコマンドを追加

----------------------------------------------
11/8
IncreaseFracでプラス演算子を使うように変更
test_benchからwrapperへ名前を変更
BarrelShitの問題点を修正

----------------------------------------------
10/15
正規化と丸めを分割した

IncreaseFracを手直しした

----------------------------------------------
3/9
4倍精度加算器生成時の128ビット幅のバグ
-->確保するメモリ量を増やして解決

----------------------------------------------
3/8
指数部3，仮数部4の8bitの加算器を生成して
FloPoCo用いて結果を比較
-->コンディションコードが異なることを除けば演算はほぼ合ってる
-->正と負の無限大同士の加算の結果のみ異なる
-->個人的には0になるので大丈夫だと考えてるけど要確認

コードジェネレータとしての充実を図った
-->TestBenchコマンドで仮のテストベンチモジュール生成
-->FPAdderで現在完成している加算を生成
-->exp=n, frac=n, filename=hogehogeでそれぞれ
   指数部，仮数部，ファイル名を指定できる

次は乗算生成機能の実装を進めていく

----------------------------------------------
3/7
半精度と単精度の加算器はFloPoCoの結果と
同じになることを確認
-->全パターンで確認した訳ではないため今後確認していく

----------------------------------------------
2018/1/23
NSLのやつ

----------------------------------------------
11/13
comp_bit.cとcomp_bit_head.cとexp_comp.cを修正
round_process生成するプログラムを追加



----------------------------------------------
10/11
生成するread_zero_and_shift.sfl内で
内部端子tmpのビット数を従来より1多く取るよう変更

サブモジュールについては最低限度の完成

----------------------------------------------
10/10
単純な記述ミスを修正
check_scrディレクトリの追加
.gitignoreの追加

----------------------------------------------
9/25
read_zero_and_shiftの誤字修正
浮動小数点数の仮数部とサブモジュール内で計算する
仮数部のサイズが異なる場合（sub_shiftなど）では
generator.cで調整するので良いかも

----------------------------------------------
8/28
read_zero_and_shiftのヘッダとSFL記述生成に対応

----------------------------------------------
8/21
作ってた分のSFL記述作る奴のヘッダファイルを
作成するように実装

----------------------------------------------
2017/8/17
本体とread_zero_and_shift以外を生成
